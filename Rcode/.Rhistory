load("../../data/seeb/four_salmon_pops.rda")
set.seed(100) #to ensure reproducibility
nsamp = nrow(four_salmon_pops)
set.seed(100) #to ensure reproducibility
nsamp = nrow(four_salmon_pops)
subset = sample(1:nsamp,nsamp/2,replace=FALSE)
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
load("../../data/seeb/four_salmon_pops.rda")
set.seed(100) #to ensure reproducibility
nsamp = nrow(four_salmon_pops)
subset = rbinom(nsamp,1,0.5) #include each fish in subset with probability 0.5
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
table(train[,2])
table(test[,2])
subset = (rbinom(nsamp,1,0.5)==1) #include each fish in subset with probability 0.5
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
set.seed(100) #to ensure reproducibility
nsamp = nrow(four_salmon_pops)
subset = (rbinom(nsamp,1,0.5)==1) #include each fish in subset with probability 0.5
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
head(test)
table(test[,2])
table(train[,2])
compute_freqs = function(locus){
alleles = unique(four_salmon_pops[,1+2*locus, 2+2*locus])
return(alleles)
}
compute_freqs(1)
compute_freqs(2)
?unique
compute_freqs = function(data,locus){
return(table(data[,1+2*locus, 2+2*locus]))
}
compute_freqs(train,1)
compute_freqs(train,2)
compute_freqs(test,2)
names(compute_freqs(test,1))
compute_freqs(test,1)["218"]
compute_freqs(test,1)[test[,3]]
test[,3]
compute_freqs(test,1)[as.character(test[,3])]
levels= function(locus){four_salmon_pops([,1+2*locus, 2+2*locus])}
levels= function(locus){levels(factor(four_salmon_pops[,1+2*locus, 2+2*locus]))}
mylevels= function(locus){levels(factor(four_salmon_pops[,1+2*locus, 2+2*locus]))}
rm(levles)
rm(levels)
mylevels= function(locus){levels(factor(four_salmon_pops[,1+2*locus, 2+2*locus]))}
mylevels(1)
mylevels(2)
mylevels(3)
for(locus in 1:12){
four_salmon_pops[,1+2*locus]= factor(four_salmon_pops[,1+2*locus],levels = levels(locus))
four_salmon_pops[,2+2*locus]= factor(four_salmon_pops[,2+2*locus],levels = levels(locus))
}
four_salmon_pops[,3]
mylevels= function(locus){levels(factor(four_salmon_pops[,1+2*locus, 2+2*locus]))}
for(locus in 1:12){
four_salmon_pops[,1+2*locus]= factor(four_salmon_pops[,1+2*locus],levels = mylevels(locus))
four_salmon_pops[,2+2*locus]= factor(four_salmon_pops[,2+2*locus],levels = mylevels(locus))
}
four_salmon_pops[,3]
load("../../data/seeb/four_salmon_pops.rda")
set.seed(100) #to ensure reproducibility
#Convert the data at each locus to a factor
#Note that we have to be careful to include all the levels from *both* columns
#for each locus
mylevels= function(locus){levels(factor(four_salmon_pops[,1+2*locus, 2+2*locus]))}
for(locus in 1:12){
four_salmon_pops[,1+2*locus]= factor(four_salmon_pops[,1+2*locus],levels = mylevels(locus))
four_salmon_pops[,2+2*locus]= factor(four_salmon_pops[,2+2*locus],levels = mylevels(locus))
}
four_salmon_pops[,3]
nsamp = nrow(four_salmon_pops)
subset = (rbinom(nsamp,1,0.5)==1) #include each fish in subset with probability 0.5
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
#a function to compute the alleles and their frequency at a given locus (locus= 1...12)
compute_freqs = function(data,locus){
return(table(data[,1+2*locus, 2+2*locus],levels=levels))
}
?table
compute_freqs = function(data,locus){
return(table(data[,1+2*locus, 2+2*locus]))
}
compute_freqs(test,1)
compute_freqs(train,1)
compute_freqs(test,2)
compute_freqs(train,2)
compute_freqs(test,3)
compute_freqs(train,3)
compute_freqs(train,1)
test[,3]
for(i in 1:locus){trainfreq[[i]]= compute_freqs(train,i)}
trainfreq = list()
for(i in 1:locus){trainfreq[[i]]= compute_freqs(train,i)}
trainfreq[[1]]
trainfreq[[2]]
normalize= function(x){x/sum(x)}
lapply(trainfreq,normalize)
trainf[[1]][test[,3]]
trainf = lapply(trainfreq,normalize)
trainf[[1]][test[,3]]
test[,3]
trainf[[1]][test[,3]]
source('~/Documents/git/stat302/exercises/seeb/train_test.R', echo=TRUE)
trainf[[1]]
sum(trainf[[1]])
source('~/Documents/git/stat302/exercises/seeb/train_test.R', echo=TRUE)
source('~/Documents/git/stat302/exercises/seeb/train_test.R', echo=TRUE)
compute_counts(four_salmon_pops,1)
compute_counts(four_salmon_pops,1)
source('~/.active-rstudio-document', echo=TRUE)
compute_counts(four_salmon_pops,1)
sum(four_salmon_pops[,3]=="208")
sum(four_salmon_pops[,3]=="208",na.rm=TRUE)
sum(four_salmon_pops[,3]=="208",na.rm=TRUE)
sum(four_salmon_pops[,4]=="208",na.rm=TRUE)
sum(four_salmon_pops[,4]=="214",na.rm=TRUE)
sum(four_salmon_pops[,3]=="214",na.rm=TRUE)
sum(four_salmon_pops[,3]=="226",na.rm=TRUE)
sum(four_salmon_pops[,4]=="226",na.rm=TRUE)
orig_data = read.table("../../data/seeb/four_salmon_pops.csv",header=TRUE,colClasses="character",sep=",")
set.seed(100) #to ensure reproducibility
#Convert the data at each locus to a factor
#Note that we have to be careful to include all the levels from *both* columns
#for each locus
mylevels= function(locus){levels(factor(c(orig_data[,(1+2*locus)],
orig_data[,(2+2*locus)])))}
#now set up four_salmon_pops
four_salmon_pops = orig_data
for(locus in 1:12){
four_salmon_pops[,1+2*locus]= factor(four_salmon_pops[,1+2*locus],levels = mylevels(locus))
four_salmon_pops[,2+2*locus]= factor(four_salmon_pops[,2+2*locus],levels = mylevels(locus))
}
#Randomly divide the data into a training set and a test set
nsamp = nrow(four_salmon_pops)
subset = (rbinom(nsamp,1,0.5)==1) #include each fish in subset with probability 0.5
View(four_salmon_pops)
table(four_salmon_pops[,2])
ASH
ash
require("ashr")
ash
sum = 0
for(i in 1:100){sum <- sum + i}
sum
for(i in 1:1000){sum <- sum + i}
sum
sum=0
for(i in 1:1000){sum <- sum + i}
sum=0
for(i in 1:1000){sum <- sum + i}
sum
source('~/Dropbox/Documents/git/ash/Rcode/batch.R', echo=TRUE)
require("ashr")
#set up some data with mixture of two values of sigmaa
set.seed(100)
sebetahat = 0.01*rgamma(1500,1,1)
beta =  c(rnorm(500,0,1),rnorm(500,0,0.01),rnorm(500,0,0.000001))
betahat = beta + rnorm(1500,0,sebetahat)
beta.ash = ash(betahat,sebetahat)
attach(beta.ash)
zscore = betahat/sebetahat
pval = pchisq(zscore^2,df=1,lower.tail=F)
sum(PositiveProb>0.95 | PositiveProb<0.05)
beta.ash = ash(betahat,sebetahat, method="fdr")
attach(beta.ash)
zscore = betahat/sebetahat
pval = pchisq(zscore^2,df=1,lower.tail=F)
sum(PositiveProb>0.95 | PositiveProb<0.05)
library("qvalue")
qq = qvalue(pval)
sum(qq$qvalues<0.05)
conf=ifelse(PositiveProb>0.5,PositiveProb,1-PositiveProb)
err = (sign(betahat) != sign(beta))
plot(cumsum(err[order(qq$qvalues)]),type="l")
lines(cumsum(err[order(conf,decreasing=TRUE)]),col=2)
set.seed(100)
sebetahat = 0.01*rgamma(1500,1,1)
beta =  c(rnorm(500,0,1),rnorm(500,0,0.01),rnorm(500,0,0.000001))
betahat = beta + rnorm(1500,0,sebetahat)
beta.ash = ash(betahat,sebetahat, method="fdr")
zscore = betahat/sebetahat
pval = pchisq(zscore^2,df=1,lower.tail=F)
sum(beta.ash$PositiveProb>0.95 | beta.ash$PositiveProb<0.05)
sum(beta.ash$lfsr<0.05)
library("qvalue")
qq = qvalue(pval)
sum(qq$qvalues<0.05)
sign(0)
err = (sign(betahat) != sign(beta))
plot(cumsum(err[order(qq$qvalues)]),type="l")
lines(cumsum(err[order(beta.ash$lfsr)]),col=2)
hist(sebetahat)
hist(1/sebetahat)
source('~/Dropbox/Documents/git/ash/Rcode/batch.R', echo=TRUE)
sebetahat = 0.01*rgamma(1500,0.5,0.5)
beta =  c(rnorm(500,0,1),rnorm(500,0,0.01),rnorm(500,0,0.000001))
betahat = beta + rnorm(1500,0,sebetahat)
beta.ash = ash(betahat,sebetahat, method="fdr")
zscore = betahat/sebetahat
pval = pchisq(zscore^2,df=1,lower.tail=F)
sum(beta.ash$lfsr<0.05)
#if not installed, first install q value package
#source("http://bioconductor.org/biocLite.R")
#biocLite("qvalue")
library("qvalue")
qq = qvalue(pval)
sum(qq$qvalues<0.05)
#check whether ordering by q values does better or worse
#job than ordering by confidence, in terms of identifying
#betas with the right sign
err = (sign(betahat) != sign(beta))
plot(cumsum(err[order(qq$qvalues)]),type="l")
lines(cumsum(err[order(beta.ash$lfsr)]),col=2)
#note: I edited nejm_brca_release.txt by removing columns 1-3
hh = read.table("nejm_brca_release_edit.csv",sep=",",skip=3)
plot(beta.ash$qvalue,qq$qvalues)
?ashr
?ash
source('~/Dropbox/Documents/git/ash/Rcode/jash_test.R', echo=TRUE)
setwd("~/Dropbox/Documents/git/ash/Rcode")
source('~/Dropbox/Documents/git/ash/Rcode/jash_test.R', echo=TRUE)
source('jash.r')
source("jash.r")
source('~/Dropbox/Documents/git/ash/Rcode/jash.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
