int n_xa = xa.size(), n_xb = xb.size();
Rcpp::NumericVector xab(n_xa + n_xb - 1);
for (int i = 0; i < n_xa; i++)
for (int j = 0; j < n_xb; j++)
xab[i + j] += xa[i] * xb[j];
return xab;
'
fun <- cxxfunction(signature(a = "numeric", b = "numeric"),src, plugin = "Rcpp")
fun(1:3, 1:4)
View(P)
load("debug_logLR_inf.Robj")
pwd
system("pwd")
pbinom(526,1000,0.5)
?pbinom
citation(qvalue)
library(qvalue)
citation(qvalue)
qvalue
??cite
??citation
comp = rbinom(nsamp,1,0.1)
set.seed(100)
nsamp=10000
mu0 = rep(0,nsamp)
mu1 = rnorm(nsamp,-3,1)
comp = rbinom(nsamp,1,0.1)
mu = rnorm(nsamp,-3,1)
comp
mean(comp)
set.seed(100)
nsamp=10000
mu0 = rep(0,nsamp)
mu1 = rnorm(nsamp,-3,1)
comp = rbinom(nsamp,1,0.1)
mu = rnorm(nsamp,-3,1)
z = rnorm(nsamp,mu,1)
res.ash = ash(z,1)
library(ashr)
res.ash = ash(z,1)
?ashci
res.ash2 = ash(z,1,nonzeromode=TRUE)
ashci
CImatrix= ashci(res.ash,level=0.95)
CImatrix
dim(CImatrix)
plot(z,mu)
mu = ifelse(comp==0,mu1,mu1)
z = rnorm(nsamp,mu,1)
mu = ifelse(comp==0,mu0,mu1)
z = rnorm(nsamp,mu,1)
plot(mu,z)
plot(z,mu)
library(ashr)
res.ash = ash(z,1)
CImatrix= ashci(res.ash,level=0.95)
CImatrix
points(z[CImatrix[,1]],CImatrix[,5]),col="red")
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
res.ash
?ash
res.ash = ash(z,1,mixcompdist="halfuniform")
CImatrix= ashci(res.ash,level=0.95)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
res.ash
res.ash$fdr
res.ash$lfdr
ash
res.ash = ash(z,1,mixcompdist="halfuniform",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
res.ash
res.ash = ash(z,1,mixcompdist="halfuniform",method="fdr",gridmult = 2^0.25)
res.ash
?CImatrix
?ashci
ash
compute_lfsr
ashci
ci.lower
ashci:::ci.lower
ashr:::ci.lower
ashr:::ci.upper
CImatrix= ashci(res.ash,level=0.90)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
plot(z,(z-3)/2+1.96/sqrt(2),col="green")
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
points(z,(z-3)/2+1.96/sqrt(2),col="green")
points(z,(z-3)/2-1.96/sqrt(2),col="green")
CImatrix= ashci(res.ash,level=0.95)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
points(z,(z-3)/2+1.96/sqrt(2),col="green")
points(z,(z-3)/2-1.96/sqrt(2),col="green")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
plot(z,fdr)
min(z[fdr<0.05])
max(z[fdr<0.05])
mean(z[fdr<0.05])
mean(fdr[fdr<0.05])
mean(fdr[fdr<0.1])
mean(fdr[fdr<0.2])
mean(fdr[fdr<0.25])
mean(fdr[fdr<0.22])
mean(fdr[fdr<0.23])
mean(fdr[fdr<0.24])
max(z[fdr<0.24])
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
pnorm(0.95)
pnorm(0.975)
pnorm(0.025)
qnorm(0.025)
fdr
fdr
points(z,(z-3)/2-qnorm(0.975+fdr)/sqrt(2),col="green")
points(z,(z-3)/2+qnorm(0.975+fdr)/sqrt(2),col="green")
points(z,(z-3)/2-qnorm(0.975)/sqrt(2),col="green")
min(z[fdr<0..05])
max(z[fdr<0..05])
max(z[fdr<0.05])
abline(v=max(z[fdr<0.05]))
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
o=order(z)
lines(z[o],(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),col="green")
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green")
abline(v=max(z[fdr<0.05]))
lines(z[o],(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),col="green",lwd=2)
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green",lwd=2)
qnorm(2)
qnorm(1)
upper = ifelse(fdr[o]<0.025,(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),0)
lines(z[o],upper,col="green",lwd=2)
res.ash = ash(z,1,mixcompdist="normal",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
BayesComparePlot()
BayesComparePlot=function(){
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
o=order(z)
upper = ifelse(fdr[o]<0.025,(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),0)
lines(z[o],upper,col="green",lwd=2)
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green",lwd=2)
abline(v=max(z[fdr<0.05]))
}
BayesComparePlot()
BayesComparePlot()
res.ash = ash(z,1,mixcompdist="normal",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
BayesComparePlot()
source('~/.active-rstudio-document', echo=TRUE)
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-7)
?ash
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-9)
res.ash.zero
res.ash.zero$loglik
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-11)
res.ash.zero$loglik
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-5)
res.ash.zero$loglik
res.ash$loglik
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")
ash
0:0
ashr:::autoselect
ashr:::autoselect.sd
ashr:::autoselect.mixsd
mult=sqrt(2)
3<=2
install.packages("~/Documents/git/ash/package/ashr/R/ashr.tar.gz",repos=NULL,type="source")
install.packages("~/Dropbox/Documents/git/ash/package/ashr/R/ashr.tar.gz",repos=NULL,type="source")
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
install.pacakges("doParallel")
install.packages("doParallel")
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
ash
library("ashr")
ashr:::autoselect.mixsd
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
libary(ashr)
library(ashr)
ashr:::autoselect.mixsd
library(ashr)
res.ash=list()
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$nf = ash(1,1,mixcompdist="normal",method="fdr")
res.ash$us = ash(1,1,mixcompdist="uniform",method="shrink")
res.ash$uf = ash(1,1,mixcompdist="uniform",method="fdr")
library(ashr)
res.ash=list()
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$nf = ash(1,1,mixcompdist="normal",method="fdr")$lfsr[1]
res.ash$us = ash(1,1,mixcompdist="uniform",method="shrink")$lfsr[1]
res.ash$uf = ash(1,1,mixcompdist="uniform",method="fdr")$lfsr[1]
res.ash$hus = ash(1,1,mixcompdist="halfuniform",method="shrink")$lfsr[1]
res.ash$huf = ash(1,1,mixcompdist="halfuniform",method="fdr")$lfsr[1]
res.ash$ns
res.ash
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")\
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="fdr")
res.ash
library(ashr)
library(qvalue)
library(ashr)
library(qvalue)
res.qvalue=list()
res.ash=list()
nsamp = 1000
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,method="fdr",mixcompdist="halfuniform")
}
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,method="fdr",mixcompdist="halfuniform")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash=list()
nsamp = 1000
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash=list()
nsamp = 1000
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
}
getpi0.qvalue=function(q){return(q$pi0)}
pi0.qvalue=lapply(res.qvalue,getpi0.qvalue)
pi0.ash =lapply(res.ash,get_pi0)
pi0.qvalue
pi0.ash
hist(pi0.ash)
hist(unlist(pi0.ash))
hist(unlist(pi0.qvalue))
res.ash[[1]]$g
res.ash[[1]]$fitted.g
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
res.qvalue=list()
res.ash.hu=list()
res.ash.u=list()
res.ash.n=list()
nsamp = 1000
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash.hu=list()
res.ash.u=list()
res.ash.n=list()
nsamp = 1000
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
getpi0.qvalue=function(q){return(q$pi0)}
pi0.qvalue=lapply(res.qvalue,getpi0.qvalue)
pi0.ash.hu =lapply(res.ash.hu,get_pi0)
pi0.ash.u =lapply(res.ash.u,get_pi0)
pi0.ash.n =lapply(res.ash.n,get_pi0)
pi0.ash.n
pi0.ash.u
temp = c(0,2,4,3,0,2,3,4)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
res.ash.hu[[1]]$fitted.g
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE)
temp$fitted.g
names(temp)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp$fitted.g
?dscr
library(dscr)
devtools::install_github
devtools::install_github("dscr",username="stephens999")
devtools::install_github("stephens999/dscr")
vignette(dscr)
library(dscr)
vignette(dscr)
?vignette
vignette(package=dscr)
vignette(package="dscr")
?winsor
setwd("~/Dropbox/Documents/git/ash/talks")
install.packages("../package/ashr.no.cxx.tar.gz",type="source",repos=NULL)
install.packages("SQUAREM")
install.packages("doParallel")
install.packages("../package/ashr.no.cxx.tar.gz",type="source",repos=NULL)
biocLite("qvalue")
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
install.packages("mixfdr")
install.packages("locfdr")
install.packages("localfdr")
install.packages("fdrtool")
install.packages("../locfdr_1.1-7.tar.gz",type="source",repos=NULL)
install.packages("mixfdr")
install.packages("../mixfdr_1.0.tar.gz",type="source",repos=NULL)
install.packages("optparse")
library(experimentr)
library(experimentr,lib.loc="~/Dropbox/Rpackages/")
?experimentr
??experimentr
library("roxygen2")
install.packages("roxygen2")
install.packages("testthat")
library(experimentr,lib.loc="~/Dropbox/Rpackages/")
??experimentr
?experimentr
?run_task
?optparse
install.packages("mime")
install.packages("formatR")
install.packages("formatR")
library("formatR")
?formatR
install.packages("formatR")
install.packages("formatR")
library("formatR",lib.loc="/Users/stephens/Dropbox/Rpackage")
library("formatR",lib.loc="/Users/stephens/Dropbox/Rpackages")
plot(blocks())
x=blocks(len)+rnorm(len)
sd(blocks(len))
source('~/Dropbox/Documents/git/dscr-smash/datamakers/datamaker.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sd(x)
sd(blocks(len))
y=blocks(len)+rnorm(len,0,sd=sd(blocks(len)))
points(x,y)
library("wavethresh")
install.packages("wavethresh")
library("wavethresh")
?wavethresh
wd(y)
plot(wd(y))
plot(wd(y,family="Haar"))
?wd
plot(wd(y,filter=1))
plot(wd(y,filter=0))
?wavMRD
plot(wd(y,filter=1,family="DaubExPhase"))
?wd
plot(wd(y,filter=1,family="DaubExPhase"),first.level=3)
plot(wd(y,filter=1,family="DaubExPhase"),first.level=5)
plot(wd(mu,filter=1,family="DaubExPhase"),first.level=5)
plot(wd(y,filter=1,family="DaubExPhase"),first.level=5) #Haar transform
?wd
temp = thresh(mu.wd, policy="BayesThresh")
y.wd.thresh = threshold(y.wd, policy="BayesThresh")
source('~/.active-rstudio-document', echo=TRUE)
y.wd.thresh = threshold(y.wd, policy="BayesThresh")
plot(y.wd.thresh)
?wd
y.est = wr(y.wd.thresh)
plot(y.est)
load("../../dscr-smash/res.RData")
res.1.v1 = res %>% filter(grepl(".1.v1",scenario)) %>% filter(method %in% c("smash.haar","smash.homo.s8","ebayesthresh"))
library("dplyr")
res.1.v1 = res %>% filter(grepl(".1.v1",scenario)) %>% filter(method %in% c("smash.haar","smash.homo.s8","ebayesthresh"))
library("ggplot2")
ggplot(res.1.v1,aes(x=method,y=mise,fill=method)) + geom_violin() + facet_grid(.~scenario)
sigma=sqrt(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))
t = 1:1024/1024
sigma=sqrt(0.0001+4*(exp(-550*(t-0.2)^2)+exp(-200*(t-0.5)^2)+exp(-950*(t-0.8)^2)))
plot(sigma)
pos = c(.1, .13, .15, .23, .25, .40, .44, .65, .76, .78, .81)
hgt = 2.97/5*c(4, 5, 3, 4, 5, 4.2, 2.1, 4.3, 3.1, 5.1, 4.2)
wth = c(.005, .005, .006, .01, .01, .03, .01, .01, .005, .008, .005)
var.b = rep(0,n)
for(j in 1:length(pos)){
var.b = var.b + hgt[j]/(( 1 + (abs(t - pos[j])/wth[j]))^4)
}
sigma=sqrt(0.00001+var.b)
n=1024
pos = c(.1, .13, .15, .23, .25, .40, .44, .65, .76, .78, .81)
hgt = 2.97/5*c(4, 5, 3, 4, 5, 4.2, 2.1, 4.3, 3.1, 5.1, 4.2)
wth = c(.005, .005, .006, .01, .01, .03, .01, .01, .005, .008, .005)
var.b = rep(0,n)
for(j in 1:length(pos)){
var.b = var.b + hgt[j]/(( 1 + (abs(t - pos[j])/wth[j]))^4)
}
sigma=sqrt(0.00001+var.b)
plot(sigma)
pos=c(.1, .13, .15, .23, .25, .40, .44, .65, .76, .78, .81)
hgt = 2.88/5*c(4, (-5), 3, (-4), 5, (-4.2), 2.1, 4.3, (-3.1), 2.1, (-4.2))
var.cblk = rep(0,n)
for(j in 1:length(pos)){
var.cblk = var.cblk + (1 + sign(t-pos[j]))*(hgt[j]/2)
}
var.cblk[var.cblk<0]=0
sigma=sqrt(0.00001+1*(var.cblk-min(var.cblk))/max(var.cblk))
plot(sigma)
res.1.v4 = res %>% filter(grepl(".1.v3",scenario)) %>% filter(method %in% c("smash.haar","smash.homo.s8","ebayesthresh"))
ggplot(res.1.v4,aes(x=method,y=mise,fill=method)) + geom_violin() + facet_grid(.~scenario)
unique(res$methods)
unique(res$method)
res.1.v1 = res %>% filter(grepl(".1.v1",scenario)) %>% filter(method %in% c("smash.haar","smash.homo.s8","ebayesthresh","sure.homo.s8"))
ggplot(res.1.v1,aes(x=method,y=mise,fill=method)) + geom_violin() + facet_grid(.~scenario)
paste0(c("ang","blip","blk","bump","cor","dop","sp"),".1.v1")
PLOTNAMES=c("angles","blip","blocks","bump","corner","doppler","spike")
res.1.v1$scenario=factor(res.1.v1$scenario,levels=paste0(c("ang","blip","blk","bump","cor","dop","sp"),".1.v1"))
levels(res.1.v1$scenario)=PLOTNAMES
ggplot(res.1.v1,aes(x=method,y=mise,fill=method)) + geom_violin() + facet_grid(.~scenario)
ggplot(res.1.v1,aes(x=method,y=mise,fill=method),xlab="") + geom_violin() + facet_grid(.~scenario)
ggplot(res.1.v1,aes(x=method,y=mise,fill=method)) + geom_violin() + facet_grid(.~scenario) + theme(axis.text.x=element_blank())
install.packages(fdrtool)
install.packages("fdrtool")
install.packages("../locfdr_1.1-7.tar.gz")
install.packages("../locfdr_1.1-7.tar.gz",repos=NULL)
?install.packages
install.packages("../locfdr_1.1-7.tar.gz",repos=NULL,type="source")
install.packages("../mixfdr_1.0.tar.gz",repos=NULL,type="source")
source("../dsc-shrink/plot_pi0.R")
setwd("~/Dropbox/Documents/git/ash/talks")
source("../dsc-shrink/plot_pi0.R")
source("../paper/dsc-shrink/plot_pi0.R")
source("../dsc-shrink/plot_pi0_est.R")
set.seed(100)
s.good = 0.5
s.poor = 10
J.good= 500
J.poor = 500
J=J.good+J.poor
beta = c(rnorm(J,0,1))
s = c(rep(s.good,J.good),rep(s.poor,J.poor))
betahat = beta + rnorm(J,0,s)
#compute the usual zscore and corresponding p value
zscore = betahat/s
pval = pchisq(zscore^2,df=1,lower.tail=F)
qq.all = qvalue(pval)
library(qvalue)
qq.all = qvalue(pval)
qq.good = qvalue(pval[1:500])
qq.good$pi0
library(ashr)
beta.ash.good = ash(betahat[1:500],s[1:500],method="fdr")
beta.ash.all = ash(betahat,s,method="fdr")
beta.ash.good
140/8000
